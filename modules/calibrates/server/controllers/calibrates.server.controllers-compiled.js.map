{"version":3,"sources":["calibrates.server.controllers.js"],"names":[],"mappings":";;AAAA;AACA,IAAI,SAAS,QAAS,QAAQ,GAAR,KAAgB,6BAAzB,CAAb;AAAA,IACI,OAAS,QAAQ,MAAR,CADb;AAEA;AACA,QAAQ,SAAR,GAAoB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACtC,SAAO,cAAP,CAAsB,OAAtB,GAAgC,IAAhC,CAAqC,UAAS,UAAT,EAAoB;AACvD,QAAI,MAAJ,CAAW,WAAX,EAAwB,EAAE,YAAY,UAAd,EAAxB;AACD,GAFD;AAGD,CAJD;AAKA,QAAQ,IAAR,GAAe,UAAU,GAAV,EAAe,GAAf,EAAoB;AACjC,SAAO,SAAP,CAAiB,OAAjB,GAA2B,IAA3B,CAAgC,UAAS,KAAT,EAAe;AAC7C,QAAI,MAAJ,CAAW,MAAX,EAAmB,EAAE,OAAO,KAAT,EAAnB;AACD,GAFD;AAGD,CAJD;AAKA,QAAQ,QAAR,GAAmB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACrC,SAAO,aAAP,CAAqB,OAArB,GAA+B,IAA/B,CAAoC,UAAS,SAAT,EAAmB;AACrD,QAAI,MAAJ,CAAW,UAAX,EAAuB,EAAE,WAAW,SAAb,EAAvB;AACD,GAFD;AAGD,CAJD;;AAMA;AACA,QAAQ,SAAR,GAAoB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACtC;AACA,eAAa,EAAb;AACA;AACE,MAAI,MAAJ,CAAW,WAAX,EAAwB,EAAE,YAAY,UAAd,EAAxB;AACF;AACD,CAND;;AAQA,QAAQ,MAAR,GAAiB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACnC,SAAO,MAAP,CAAc,OAAd,GAAwB,IAAxB,CAA6B,UAAS,OAAT,EAAiB;AAC5C,QAAI,MAAJ,CAAW,QAAX,EAAqB,EAAE,SAAS,OAAX,EAArB;AACD,GAFD;AAGD,CAJD;;AAMA,QAAQ,aAAR,GAAwB,UAAU,GAAV,EAAe,GAAf,EAAoB,CAE3C,CAFD;AAGA,QAAQ,aAAR,GAAwB,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC1C,YAAU,MAAV,CAAiB,IAAI,IAArB,EAA0B;AACxB,YAAO,CAAC,OAAD,EAAU,cAAV,EAA0B,aAA1B;AADiB,GAA1B,EAGG,IAHH,CAGQ,UAAU,YAAV,EAAwB;AAC5B,YAAQ,GAAR,CAAY,aAAa,UAAzB;AACD,GALH;AAMD,CAPD;;AASA,QAAQ,UAAR,GAAqB,UAAU,GAAV,EAAe,GAAf,EAAoB,CAExC,CAFD;;AAIA;AACA,QAAQ,YAAR,GAAuB,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB,EAAzB,EAA6B;AAClD,MAAI,CAAC,EAAL,EAAS;AACP,WAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AAC1B,eAAS;AADiB,KAArB,CAAP;AAGD;;AAED,OAAK,QAAL,CAAc,EAAd,EAAkB,IAAlB,CAAuB,UAAS,QAAT,EAAmB;AACxC,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,KAAK,IAAI,KAAJ,CAAU,6BAA6B,EAAvC,CAAL,CAAP;AACD,KAFD,MAEO;;AAEL,UAAI,OAAO,EAAX;;AAEA,WAAK,EAAL,GAAU,SAAS,EAAnB;AACN;;;;;;;;;;AAUM,UAAI,KAAJ,GAAY,IAAZ;AACA;AACA,aAAO,IAAP;AACD;AACF,GAtBD,EAsBG,KAtBH,CAsBS,UAAS,GAAT,EAAc;AACrB,WAAO,KAAK,GAAL,CAAP;AACD,GAxBD;AA0BD,CAjCD","file":"calibrates.server.controllers-compiled.js","sourcesContent":["// load the models\r\nvar models = require( process.cwd() + '/modules/core/server/models'),\r\n    cors   = require('cors');\r\n/* initial dumps from tables */\r\nexports.equipment = function (req, res) {\r\n  models.ECMS_Equipment.findAll().then(function(equipments){\r\n    res.render('equipment', { equipments: equipments});\r\n  });\r\n};\r\nexports.main = function (req, res) {\r\n  models.ECMS_Main.findAll().then(function(mains){\r\n    res.render('main', { mains: mains});\r\n  });\r\n};\r\nexports.location = function (req, res) {\r\n  models.ECMS_Location.findAll().then(function(locations){\r\n    res.render('location', { locations: locations});\r\n  });\r\n};\r\n\r\n/* logic goes here */\r\nexports.calibrate = function (req, res) {\r\n  // replace calibrates with logic, promise return.\r\n  calibrates = {};\r\n  // myPromise.doSomething().then(function(records){\r\n    res.render('calibrate', { calibrates: calibrates});\r\n  // });\r\n};\r\n\r\nexports.record = function (req, res) {\r\n  models.Record.findAll().then(function(records){\r\n    res.render('record', { records: records});\r\n  });\r\n};\r\n\r\nexports.postCalibrate = function (req, res) {\r\n\r\n};\r\nexports.postEquipment = function (req, res) {\r\n  Equipment.create(req.body,{\r\n    fields:['model', 'asset_number', 'location_id']\r\n  })\r\n    .then(function (newEquipment) {\r\n      console.log(newEquipment.dataValues);\r\n    })\r\n};\r\n\r\nexports.postRecord = function (req, res) {\r\n\r\n};\r\n\r\n/* cloned from exports.userByID */\r\nexports.locationByID = function(req, res, next, id) {\r\n  if (!id) {\r\n    return res.status(400).send({\r\n      message: 'User is invalid'\r\n    });\r\n  }\r\n\r\n  User.findById(id).then(function(location) {\r\n    if (!location) {\r\n      return next(new Error('Failed to load location ' + id));\r\n    } else {\r\n\r\n      var data = {};\r\n\r\n      data.id = location.id;\r\n/*    data.firstName = location.firstName;\r\n      data.lastName = location.lastName;\r\n      data.displayName = location.displayName;\r\n      data.email = location.email;\r\n      data.locationname = location.locationname;\r\n      data.roles = JSON.parse(location.roles);\r\n      data.provider = location.provider;\r\n      data.updatedAt = location.updatedAt;\r\n      data.createdAt = location.createdAt;*/\r\n\r\n      req.model = data;\r\n      next();\r\n      return null;\r\n    }\r\n  }).catch(function(err) {\r\n    return next(err);\r\n  });\r\n\r\n};"]}